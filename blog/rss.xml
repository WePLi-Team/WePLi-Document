<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>WePLi Blog</title>
        <link>https://wepli.site/blog</link>
        <description>WePLi Blog</description>
        <lastBuildDate>Wed, 12 Feb 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[가짜 로딩을 통해 사용자 기대감 향상시키기]]></title>
            <link>https://wepli.site/blog/가짜 로딩을 활용하는 방법</link>
            <guid>https://wepli.site/blog/가짜 로딩을 활용하는 방법</guid>
            <pubDate>Wed, 12 Feb 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[이번 글에서는 WePLi에서 가짜 로딩(Fake Loading)을 활용하게 된 계기와 이를 통해 얻은 UX적 개선 효과에 대해 이야기하려 합니다.]]></description>
            <content:encoded><![CDATA[<p>이번 글에서는 WePLi에서 가짜 로딩(Fake Loading)을 활용하게 된 계기와 이를 통해 얻은 UX적 개선 효과에 대해 이야기하려 합니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-문제-인식">🎯 문제 인식<a href="https://wepli.site/blog/%EA%B0%80%EC%A7%9C%20%EB%A1%9C%EB%94%A9%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95#-%EB%AC%B8%EC%A0%9C-%EC%9D%B8%EC%8B%9D" class="hash-link" aria-label="Direct link to 🎯 문제 인식" title="Direct link to 🎯 문제 인식">​</a></h3>
<img src="https://wepli.site/assets/images/namecard_flow-8faf5a8eaa24e006c76bee85fbaf5efd.png" alt="NameCardFlow">
<br>
<p>최근 WePLi에서 사용자의 취향이 반영된 명함을 생성하고 공유할 수 있는 기능을 개발하고 있었습니다.</p>
<p>이 기능은 사용자가 입력한 정보를 기반으로 명함을 즉시 생성하는 방식이었는데, 개발을 완료한 후 실제로 테스트해 보니 예상보다 밋밋한 느낌이 들었습니다.</p>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-왜-그렇게-느껴졌을까">❓ 왜 그렇게 느껴졌을까?<a href="https://wepli.site/blog/%EA%B0%80%EC%A7%9C%20%EB%A1%9C%EB%94%A9%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95#-%EC%99%9C-%EA%B7%B8%EB%A0%87%EA%B2%8C-%EB%8A%90%EA%BB%B4%EC%A1%8C%EC%9D%84%EA%B9%8C" class="hash-link" aria-label="Direct link to ❓ 왜 그렇게 느껴졌을까?" title="Direct link to ❓ 왜 그렇게 느껴졌을까?">​</a></h3>
<p>명함 생성 과정은 기술적으로 보면 완벽하고 단순했습니다.</p>
<ol>
<li>사용자가 정보를 입력하고 버튼을 누르면,</li>
<li>미리 정의된 템플릿에 데이터를 채워서</li>
<li>바로 명함을 보여주면 끝.</li>
</ol>
<p>그런데 <strong>사용 경험(UX)</strong> 측면에서는 뭔가 부족함이 있었습니다.</p>
<p>입력한 정보들이 너무 빠르게 명함으로 변환되면서, 사용자는 <strong>내가 무언가를 만들어낸 느낌</strong>을 받지 못했습니다.
어떤 데이터를 입력하든 순식간에 결과물이 나와버리니 감흥이 적었고, 그 과정에서 특별한 기대감도 형성되지 않았습니다.</p>
<p>즉, 기능적으로는 문제가 없지만 UX적으로는 임팩트가 부족한 상태였습니다.
이를 해결하기 위해 "가짜 로딩"을 추가해 사용자 경험을 개선할 수 있겠다는 생각을 하게 되었습니다.</p>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-가짜-로딩을-추가하면-뭐가-좋을까">🤔 가짜 로딩을 추가하면 뭐가 좋을까?<a href="https://wepli.site/blog/%EA%B0%80%EC%A7%9C%20%EB%A1%9C%EB%94%A9%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95#-%EA%B0%80%EC%A7%9C-%EB%A1%9C%EB%94%A9%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EB%A9%B4-%EB%AD%90%EA%B0%80-%EC%A2%8B%EC%9D%84%EA%B9%8C" class="hash-link" aria-label="Direct link to 🤔 가짜 로딩을 추가하면 뭐가 좋을까?" title="Direct link to 🤔 가짜 로딩을 추가하면 뭐가 좋을까?">​</a></h3>
<p>보통 로딩은 최대한 줄여야 하는 요소입니다. 하지만, 일부러 로딩을 추가하는 것이 UX 개선에 도움이 될 수도 있습니다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-사용자의-기대감을-높인다">1. 사용자의 기대감을 높인다.<a href="https://wepli.site/blog/%EA%B0%80%EC%A7%9C%20%EB%A1%9C%EB%94%A9%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95#1-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9D%98-%EA%B8%B0%EB%8C%80%EA%B0%90%EC%9D%84-%EB%86%92%EC%9D%B8%EB%8B%A4" class="hash-link" aria-label="Direct link to 1. 사용자의 기대감을 높인다." title="Direct link to 1. 사용자의 기대감을 높인다.">​</a></h4>
<p>우리는 "빠르면 좋다"라고 생각하지만, 너무 빨리 끝나면 그만큼 감동도 덜합니다.</p>
<p>예를 들어, 영화에서 중요한 반전이 순식간에 지나가 버린다면 긴장감이 덜한 것처럼,
<strong>"무언가 특별한 작업이 진행되고 있다"</strong> 는 느낌은 사용자에게 기대감을 갖게 만듭니다.</p>
<p>명함을 만드는 동안 몇 초의 대기 시간은 기대감을 높이는 역할을 합니다.<br>
<strong>“어떤 명함이 나올까?“</strong> 라는 궁금증이 UX를 더 깊이 있게 만들어 줍니다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-명함이-단순한-데이터-조합이-아니라-더-정교한-작업처럼-보이도록-만든다">2. 명함이 단순한 데이터 조합이 아니라, 더 정교한 작업처럼 보이도록 만든다.<a href="https://wepli.site/blog/%EA%B0%80%EC%A7%9C%20%EB%A1%9C%EB%94%A9%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95#2-%EB%AA%85%ED%95%A8%EC%9D%B4-%EB%8B%A8%EC%88%9C%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%95%A9%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC-%EB%8D%94-%EC%A0%95%EA%B5%90%ED%95%9C-%EC%9E%91%EC%97%85%EC%B2%98%EB%9F%BC-%EB%B3%B4%EC%9D%B4%EB%8F%84%EB%A1%9D-%EB%A7%8C%EB%93%A0%EB%8B%A4" class="hash-link" aria-label="Direct link to 2. 명함이 단순한 데이터 조합이 아니라, 더 정교한 작업처럼 보이도록 만든다." title="Direct link to 2. 명함이 단순한 데이터 조합이 아니라, 더 정교한 작업처럼 보이도록 만든다.">​</a></h4>
<p>기술적으로 보면 명함 생성은 즉시 끝낼 수 있습니다.
하지만 사용자는 너무 빠르면 허술해 보인다고 느낄 수도 있습니다.</p>
<blockquote>
<p>🤖 AI가 0.1초 만에 질문에 답변을 했다면 "정확한 답변인가?"라는 의문이 들지 않나요?</p>
</blockquote>
<br>
<p>가짜 로딩을 추가하면서 진행률을 실시간으로 보여준다면, 사용자는 "내 명함이 좀 더 특별한 방식으로 만들어지고 있구나"라고 인식하게 될 것 입니다.</p>
<br>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-총-로딩-시간-결정하기">⏳ 총 로딩 시간 결정하기<a href="https://wepli.site/blog/%EA%B0%80%EC%A7%9C%20%EB%A1%9C%EB%94%A9%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95#-%EC%B4%9D-%EB%A1%9C%EB%94%A9-%EC%8B%9C%EA%B0%84-%EA%B2%B0%EC%A0%95%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to ⏳ 총 로딩 시간 결정하기" title="Direct link to ⏳ 총 로딩 시간 결정하기">​</a></h3>
<p>가짜 로딩을 통해서 사용자의 기대감을 향상시키는 것은 좋으나, 사용자를 지루하게 만들면 안됩니다.<br>
<!-- -->즉, 의도적인 로딩을 추가할 때 <strong>얼마나 오래 보여줄 것인가</strong>를 정해야합니다.</p>
<p>우선 사용자에게 답답함을 주지 않으면서 기대감을 심어줄 수 있는 최적의 시간을 찾기 위해 <strong>로딩 시간에 따른 이탈률</strong>에 관해 조사를 해보았습니다.</p>
<div align="center" width="100px"><img src="https://wepli.site/assets/images/loading_graph-b6d1ce4fd80a64414cb189045f0ec5f5.png" alt="Loading" style="width:450px"><p style="font-size:0.85rem;color:#6c757d;text-align:center"></p><p>로딩 시간에 따른 사용자 이탈률 (자료=Google / SOASTA Research, 2017)</p><p></p></div>
<ul>
<li>1초 이하 : 사용자는 로딩을 거의 인지하지 못함. 기대감 상승 효과 없음</li>
<li>1~2초 : 사용자가 "무언가 생성되고 있다"는 느낌을 받을 수 있는 최소한의 시간</li>
<li>3초 이상 : 사용자가 로딩을 부담스럽게 느끼며, 3초를 넘어서면 이탈률이 급증하는 경향이 있음.</li>
</ul>
<p>자료에 따르면 로딩이 너무 짧으면 사용자가 충분히 인지하지 못하고, 너무 길면 지루함을 느껴 이탈할 수 있습니다.
특히 3초 이상부터는 이탈률이 급격하게 증가합니다.</p>
<p>위의 조사롤 통해 처음에는 <strong>최소 1초 이상, 3초 이내로 로딩을 유지하는 것이 적절</strong>하다고 판단했습니다.</p>
<br>
<br>
<p><strong>🛠 초기 로딩 시간 설정 및 테스트</strong></p>
<p>그래서 약 2초로 로딩 시간을 설정하고 개발을 진행한 후, 지인들을 대상으로 테스트를 진행해 보았습니다.</p>
<div class="theme-admonition theme-admonition-danger admonition_xJq3 alert alert--danger"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37">🧑‍💻</span>테스터들의 반응:</div><div class="admonitionContent_BuS1"><ul>
<li>“생각보다 너무 빨리 끝나서, 로딩이 주는 임팩트가 약한 것 같다.”</li>
<li>“명함을 만드는 기능인데, 너무 짧아서 뭔가 휙 지나가 버리는 느낌이다.”</li>
</ul></div></div>
<p>👉 결론: 2초는 사용자에게 “명함이 만들어지고 있다”는 느낌을 주기엔 너무 짧음</p>
<br>
<p><strong>🛠 3~4초로 조정 후 추가 테스트 진행</strong></p>
<p>이후 로딩 시간을 3~4초로 조정하여 다시 테스트를 진행했습니다.</p>
<div class="theme-admonition theme-admonition-success admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37">🧑‍💻</span>테스터들의 반응:</div><div class="admonitionContent_BuS1"><ul>
<li>“프로그레스 바가 실시간으로 올라가는 게 보여서 자연스러웠다.”</li>
<li>“숫자가 증가하는 애니메이션이 있어서 3~4초가 지루하게 느껴지진 않았다.”</li>
<li>“명함을 만드는 기능이라면, 이 정도 로딩 시간은 필요하다고 생각한다.”</li>
</ul></div></div>
<p>👉 결론: 3~4초 정도의 시간이 사용자가 ‘기다림’을 충분히 인식하면서도, 지루함을 느끼지 않는 최적의 시간으로 판단</p>
<br>
<p>테스트 결과, 2초 이하는 기대감을 주기엔 너무 짧은 시간이었습니다.<br>
<!-- -->애니메이션과 진행률 표시가 있더라도, <strong>“명함이 만들어지는 과정”</strong> 을 체감하기엔 부족했습니다.</p>
<p>반면, <strong>3초 ~ 4초</strong> 정도의 로딩 시간을 적용했을 때는</p>
<ul>
<li>사용자가 충분히 ‘기다림’을 인식하면서도</li>
<li>지루함을 느끼지 않는 최적의 경험을 제공할 수 있었습니다.</li>
</ul>
<p>결과적으로, 명함 만들기 기능의 가짜 로딩 시간은 약 <strong>3초 ~ 4초</strong>로 설정하였습니다.</p>
<br>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-로딩-애니메이션-설계">🚀 로딩 애니메이션 설계<a href="https://wepli.site/blog/%EA%B0%80%EC%A7%9C%20%EB%A1%9C%EB%94%A9%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95#-%EB%A1%9C%EB%94%A9-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EC%84%A4%EA%B3%84" class="hash-link" aria-label="Direct link to 🚀 로딩 애니메이션 설계" title="Direct link to 🚀 ��로딩 애니메이션 설계">​</a></h3>
<p>가짜 로딩을 효과적으로 활용하려면 단순히 기다리는게 아니라, <strong>자연스럽게 몰입할 수 있도록 설계하는 것이 중요</strong>합니다.<br>
<!-- -->잘못된 가짜 로딩은 오히려 사용자에게 <strong>시간을 끌고 있다</strong>는 인상을 줄 수 있기 때문에 주의해야합니다.</p>
<p>이를 위해, 개발 전에 명확한 UX 요구사항을 정의하고, 이를 반영하여 로딩 애니메이션을 구현하였습니다.</p>
<p><strong>📝 가짜 로딩 요구 사항</strong></p>
<ul>
<li>사용자가 로딩을 인지할 수 있어야한다. (최소 1초 이상 유지)</li>
<li>사용자가 지루함을 느껴서는 안된다. (최대 3초 이하)<br>
<!-- -->→ 3초를 넘어서면 이탈률이 증가할 가능성이 있음<br>
<!-- -->→ 적절한 애니메이션을 활용하면 체감 시간을 줄일 수 있음</li>
<li>사용자가 가짜 로딩인 것을 모르게 해야한다.<br>
<!-- -->→ 일정하게 증가하는 것이 아닌 비선형적으로 증가해야함</li>
<li>사용자가 현재 진행 상황을 명확하게 알 수 있어야한다.<br>
<!-- -->→ 진행률을 표시해 예측 가능하게 만들어야 함</li>
</ul>
<p><strong>💡 구현 방법</strong></p>
<ul>
<li>3초 이전: 로딩 진행률을 랜덤하게 증가시키며, 일반적인 프로그레스 바처럼 동작</li>
<li>3초 이후: 최소 증가량을 높여 빠르게 마무리하도록 조정</li>
<li>딜레이를 랜덤하게 조정하여 불규칙한 진행 느낌을 줌</li>
</ul>
<p><strong>📌 코드 구현 (비선형 증가 및 랜덤 딜레이 적용)</strong></p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">while</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">makeCardProgress </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">1.0f</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">val</span><span class="token plain"> elapsedTime </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">currentTimeMillis</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain"> startTime</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   reduce </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 3초 이후에는 최소 증가량을 높여 더 빠르게 진행</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">val</span><span class="token plain"> minIncrement </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">elapsedTime </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">3000L</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0.15</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">else</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0.05</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">val</span><span class="token plain"> randomIncrement </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> Random</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">nextDouble</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">minIncrement</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">0.25</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">toFloat</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">val</span><span class="token plain"> progress </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">makeCardProgress </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> randomIncrement</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      state</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">updateProgress</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">progress</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 3초 이후에는 딜레이를 줄여서 빠르게 마무리</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">val</span><span class="token plain"> delayTime </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">elapsedTime </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">3000L</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      Random</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">nextLong</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">100L</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">200L</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 3초 이후에는 짧은 딜레이 적용</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">else</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      Random</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">nextLong</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">250L</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">750L</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 3초 이전까지는 기존 딜레이 유지</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   </span><span class="token function" style="color:hsl(221, 87%, 60%)">delay</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">delayTime</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<br>
<p><strong>🎭 UI 애니메이션 적용</strong></p>
<blockquote>
<p>프로그레스 바와 숫자가 자연스럽게 증가 되도록 하였습니다.</p>
</blockquote>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">val</span><span class="token plain"> animatedProgress </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">by</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">animateFloatAsState</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   targetValue </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> state</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">makeCardProgress</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   animationSpec </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">tween</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">durationMillis </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token number" style="color:hsl(35, 99%, 36%)">250</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> easing </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> LinearOutSlowInEasing</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">   label </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string-literal singleline string" style="color:hsl(119, 34%, 47%)">"Animated Progress"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token function" style="color:hsl(221, 87%, 60%)">GradientLinearProgressBar</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">progress </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> animatedProgress</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<br>
<br>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-결론-가짜-로딩이-사용자-경험에-미치는-영향">🎯 결론: 가짜 로딩이 사용자 경험에 미치는 영향<a href="https://wepli.site/blog/%EA%B0%80%EC%A7%9C%20%EB%A1%9C%EB%94%A9%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95#-%EA%B2%B0%EB%A1%A0-%EA%B0%80%EC%A7%9C-%EB%A1%9C%EB%94%A9%EC%9D%B4-%EC%82%AC%EC%9A%A9%EC%9E%90-%EA%B2%BD%ED%97%98%EC%97%90-%EB%AF%B8%EC%B9%98%EB%8A%94-%EC%98%81%ED%96%A5" class="hash-link" aria-label="Direct link to 🎯 결론: 가짜 로딩이 사용자 경험에 미치는 영향" title="Direct link to 🎯 결론: 가짜 로딩이 사용자 경험에 미치는 영향">​</a></h3>
<img src="https://wepli.site/assets/images/Screen_Recording_20250212_235117_WePLi-25ace1723cff3a68e7cbfe64511911b2.gif" alt="Loading" style="width:200px;display:block;margin:0 auto">
<br>
<p>이번 경험을 통해 단순히 빠르게 결과를 보여주는 것이 최고의 UX가 아닐 수도 있다는 점을 다시금 확인할 수 있었습니다.<br>
<!-- -->적절한 기다림은 사용자의 기대감을 높이고, 결과를 더욱 특별하게 느끼게 하는 요소가 될 수 있습니다.</p>
<p>이제는 단순히 <strong>“최대한 빠르게”</strong> 가 아니라, <strong>“사용자가 몰입할 수 있는 최적의 속도”</strong> 를 고민하는 것이 중요한 시대인 것 같습니다.
가짜 로딩이 단순한 시간 지연이 아니라, UX를 향상시키는 중요한 도구가 될 수 있다는 점을 기억하며 앞으로도 다양한 기능에 적용해볼 계획입니다.</p>
<p>오늘도 긴 글 읽어주셔서 감사합니다. 😊</p>]]></content:encoded>
            <category>WePLi</category>
            <category>UI</category>
            <category>UX</category>
            <category>Fake Loading</category>
        </item>
        <item>
            <title><![CDATA[음악 API를 찾고 활용하기까지의 과정]]></title>
            <link>https://wepli.site/blog/Apple Music API 사용기</link>
            <guid>https://wepli.site/blog/Apple Music API 사용기</guid>
            <pubDate>Sun, 29 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[이 글에서는 WePLi에서 음악 API를 선택하고 활용한 과정을 소개합니다.]]></description>
            <content:encoded><![CDATA[<p>이 글에서는 WePLi에서 음악 API를 선택하고 활용한 과정을 소개합니다.<br>
<!-- -->특히 Apple Music API를 선택한 이유와 활용 예시를 중점으로 다룰 예정입니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="음악-데이터-구축의-필요성">음악 데이터 구축의 필요성<a href="https://wepli.site/blog/Apple%20Music%20API%20%EC%82%AC%EC%9A%A9%EA%B8%B0#%EC%9D%8C%EC%95%85-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%B6%95%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1" class="hash-link" aria-label="Direct link to 음악 데이터 구축의 필요성" title="Direct link to 음악 데이터 구축의 필요성">​</a></h3>
<p>음악 관련 서비스에서 음악 검색 기능은 필수적인 요소입니다.<br>
<!-- -->하지만 개인이 1억 개 이상의 곡과 지속적으로 추가되는 신곡 데이터를 직접 구축하는 것은 현실적으로 어렵습니다.</p>
<p>WePLi의 초기 버전(Java Swing)에서는 여러 음악 플랫폼의 인기 차트를 통합하여 제공하는 기능을 고려했었습니다. 하지만 국내 플랫폼(멜론, 지니, 벅스 등)은 공식적인 API를 제공하지 않아, 크롤링을 이용해야 했습니다.</p>
<div align="center"><p><img decoding="async" loading="lazy" alt="검색 화면 예시" src="https://wepli.site/assets/images/wepli_chart_screen-5cca5cdcc2c5f95a8abce4618b630da0.png" width="408" height="269" class="img_ev3q"></p><p align="center"></p><p>WePLi(Java Swing) 차트 화면</p><p></p></div>
<p>당시에는 서비스 배포 계획이 없었기 때문에 크롤링 방식이 문제가 되지 않았지만, 현재의 WePLi 앱은 공식적으로 배포될 예정이므로 안정적이고 법적 문제가 없는 공식 API가 필요했습니다.</p>
<p>이 글에서는 음악 API를 선택하는 과정과 고려 사항을 정리하고, Apple Music API를 어떻게 활용했는지 소개하겠습니다.</p>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="음악-api-선택-시-고려했던-것들">음악 API 선택 시 고려했던 것들<a href="https://wepli.site/blog/Apple%20Music%20API%20%EC%82%AC%EC%9A%A9%EA%B8%B0#%EC%9D%8C%EC%95%85-api-%EC%84%A0%ED%83%9D-%EC%8B%9C-%EA%B3%A0%EB%A0%A4%ED%96%88%EB%8D%98-%EA%B2%83%EB%93%A4" class="hash-link" aria-label="Direct link to 음악 API 선택 시 고려했던 것들" title="Direct link to 음악 API 선택 시 고려했던 것들">​</a></h3>
<p>WePLi는 단순 음악 검색 기능뿐만 아니라 사용자 간 공유, 게시글에 노래 첨부 등 다양한 기능을 제공합니다.
이러한 기능을 구현하기 위해 적절한 음악 API를 찾기 시작했습니다.</p>
<p><img decoding="async" loading="lazy" alt="검색 화면 예시" src="https://wepli.site/assets/images/search_screen-2718a96fee72d2e55cc000033e8c8b88.png" width="4441" height="2345" class="img_ev3q"></p>
<p>음악 API를 선택할 때 고려한 기준은 다음과 같습니다.</p>
<ul>
<li><strong>필수 조건</strong>
<ul>
<li>검색 기능 제공</li>
<li>한국 노래 지원</li>
<li>무료 또는 저렴한 비용</li>
</ul>
<br>
</li>
<li><strong>부가 조건</strong>
<ul>
<li>추천 서비스 제공(검색어, 플레이리스트 등)</li>
</ul>
</li>
</ul>
<p>위 조건으로 API를 찾던 중, 가장 흔히 사용되는 API 서비스 2개가 눈에 들어왔습니다.</p>
<ul>
<li>Spotify API <a href="https://developer.spotify.com/terms" target="_blank" rel="noopener noreferrer">[링크]</a></li>
<li>Apple Music API <a href="https://developer.apple.com/documentation/applemusicapi" target="_blank" rel="noopener noreferrer">[링크]</a></li>
</ul>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="spotify-api-vs-apple-music-api-비교">Spotify API vs Apple Music API 비교<a href="https://wepli.site/blog/Apple%20Music%20API%20%EC%82%AC%EC%9A%A9%EA%B8%B0#spotify-api-vs-apple-music-api-%EB%B9%84%EA%B5%90" class="hash-link" aria-label="Direct link to Spotify API vs Apple Music API 비교" title="Direct link to Spotify API vs Apple Music API 비교">​</a></h3>
<table><thead><tr><th></th><th>Spotify</th><th>Apple Music</th></tr></thead><tbody><tr><td>검색 기능 제공 여부</td><td>O</td><td>O</td></tr><tr><td>국내 노래 제공 여부</td><td>X (영어로 제공)</td><td>O</td></tr><tr><td>가격</td><td>무료</td><td>연 13만원</td></tr></tbody></table>
<p>Spotify API는 방대한 데이터와 무료라는 큰 장점이 있지만, 국내 노래가 한글로 지원 되지 않는다는 큰 단점이 있었습니다.
아무래도 국내보단 해외에서 많이 사용되는 서비스이기 때문에 가수들이 노래를 등록할 때 영어로 등록을 많이 하는 것 같습니다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="spotify-api의-단점">Spotify API의 단점<a href="https://wepli.site/blog/Apple%20Music%20API%20%EC%82%AC%EC%9A%A9%EA%B8%B0#spotify-api%EC%9D%98-%EB%8B%A8%EC%A0%90" class="hash-link" aria-label="Direct link to Spotify API의 단점" title="Direct link to Spotify API의 단점">​</a></h4>
<ol>
<li>한국 노래가 영어로 등록되어 있음 -&gt; 검색 및 사용자 경험 저하</li>
<li>Spotify 로그인이 필수 -&gt; Spotify를 사용하지 않는 유저에겐 허들로 느껴질 수 있음</li>
</ol>
<p>WePLi의 주요 타깃층은 <strong>국내 트렌드에 민감한 10-20대</strong> 사용자입니다.<br>
<!-- -->10-20대가 주 타깃층인 앱에서 대부분의 노래가 영어로만 제공이 된다면 <strong>앱의 매력이 크게 감소할 것</strong>이라 판단했습니다.</p>
<p>결과적으로 <strong>조금 더 완성도 높은 사용자 경험을 제공하기 위해</strong> 연 13만원의 비용을 지불하더라도 Apple Music API를 선택하였습니다.</p>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="apple-music-api-활용">Apple Music API 활용<a href="https://wepli.site/blog/Apple%20Music%20API%20%EC%82%AC%EC%9A%A9%EA%B8%B0#apple-music-api-%ED%99%9C%EC%9A%A9" class="hash-link" aria-label="Direct link to Apple Music API 활용" title="Direct link to Apple Music API 활용">​</a></h3>
<p>WePLi에선 Apple Music API를 활용하여 다음과 같은 기능을 구현했습니다.</p>
<ol>
<li><strong>음악 검색 기능</strong>
<ul>
<li>사용자가 원하는 노래를 검색하면, Apple Music API에서 제목, 아티스트, 앨범, 썸네일 이미지 등을 가져옵니다.</li>
<li>검색 결과를 기반으로 사용자가 쉽게 곡을 추가하고 공유할 수 있도록 UI를 구성했습니다.</li>
</ul>
<br>
</li>
<li><strong>인기 차트</strong>
<ul>
<li>Apple Music의 인기 차트 데이터를 가져와 실시간으로 트렌드 곡을 제공합니다.</li>
<li>사용자가 현재 인기 있는 곡을 쉽게 확인할 수 있도록 구현되었습니다.</li>
</ul>
<br>
</li>
<li><strong>인기 검색어</strong>
<ul>
<li>Apple Music API를 활용해 사용자들이 많이 검색하는 키워드를 분석하여 제공하는 기능입니다.</li>
<li>이를 통해 사용자는 현재 유행하는 음악을 쉽게 찾을 수 있습니다.</li>
</ul>
</li>
</ol>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="마무리">마무리<a href="https://wepli.site/blog/Apple%20Music%20API%20%EC%82%AC%EC%9A%A9%EA%B8%B0#%EB%A7%88%EB%AC%B4%EB%A6%AC" class="hash-link" aria-label="Direct link to 마무리" title="Direct link to 마무리">​</a></h3>
<p>WePLi는 사용자 경험을 최우선으로 고려하여 Apple Music API를 선택했습니다.<br>
<!-- -->비용적인 부담은 있지만, 보다 완성도 높은 음악 검색 및 공유 기능을 제공할 수 있다는 점에서 충분히 가치 있는 선택이라고 판단했습니다.</p>
<p>앞으로도 API를 활용한 기능을 확장하면서, 더 나은 사용자 경험을 제공할 계획입니다.<br>
<!-- -->다음 글에서는 Apple Music API를 실제로 적용한 코드 및 구현 방법을 상세히 다뤄보겠습니다.</p>
<p>긴 글 읽어주셔서 감사합니다 🎵</p>]]></content:encoded>
            <category>WePLi</category>
            <category>Apple Music API</category>
            <category>Spotify API</category>
            <category>MusicApp</category>
        </item>
        <item>
            <title><![CDATA[WePLi를 개발하게 된 이유]]></title>
            <link>https://wepli.site/blog/WePLi를 개발하게 된 이유</link>
            <guid>https://wepli.site/blog/WePLi를 개발하게 된 이유</guid>
            <pubDate>Sat, 28 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[음악은 단순히 듣는 것에서 그치지 않고, 사람들과의 연결과 감정을 공유하는 매개체로서 강력한 힘을 가집니다.]]></description>
            <content:encoded><![CDATA[<p>음악은 단순히 듣는 것에서 그치지 않고, 사람들과의 연결과 감정을 공유하는 매개체로서 강력한 힘을 가집니다.<br>
<!-- -->그렇기에 저는 음악과 관련된 프로젝트를 통해 이런 가치를 담아내고 싶다는 열망을 품게 되었습니다.</p>
<p>이 글에서는 <strong>WePLi</strong>를 개발하게 된 계기와 과정을 소개합니다.</p>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="음악과-관련된-프로젝트를-만들고-싶다는-열망">음악과 관련된 프로젝트를 만들고 싶다는 열망<a href="https://wepli.site/blog/WePLi%EB%A5%BC%20%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B2%8C%20%EB%90%9C%20%EC%9D%B4%EC%9C%A0#%EC%9D%8C%EC%95%85%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%A4%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EB%8A%94-%EC%97%B4%EB%A7%9D" class="hash-link" aria-label="Direct link to 음악과 관련된 프로젝트를 만들고 싶다는 열망" title="Direct link to 음악과 관련된 프로젝트를 만들고 싶다는 열망">​</a></h3>
<p>음악은 항상 제 삶에서 큰 영감을 주는 요소였습니다.<br>
<!-- -->특히 기존의 음악 앱들은 단순히 음악을 듣는 것을 넘어 사용자 경험과 트렌디한 디자인으로 저를 매료시켰습니다.</p>
<p>이로 인해 <strong>"내가 만든 음악 앱은 어떤 모습일까?"</strong> 라는 생각이 자연스럽게 떠올랐고,<br>
<strong>WePLi</strong> 프로젝트를 시작하는 계기가 되었습니다.</p>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="디자인에-대한-욕심">디자인에 대한 욕심<a href="https://wepli.site/blog/WePLi%EB%A5%BC%20%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B2%8C%20%EB%90%9C%20%EC%9D%B4%EC%9C%A0#%EB%94%94%EC%9E%90%EC%9D%B8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9A%95%EC%8B%AC" class="hash-link" aria-label="Direct link to 디자인에 대한 욕심" title="Direct link to 디자인에 대한 욕심">​</a></h3>
<p>저는 개발자이지만, 늘 디자인에도 관심이 많았습니다.<br>
<!-- -->기능적인 완성도는 기본이고, 이를 뒷받침하는 매력적인 디자인이야말로 프로젝트를 돋보이게 한다고 생각합니다.</p>
<p>하지만 대학 시절 디자이너와 협업을 하면서 제 취향을 반영한 결과물을 만드는 것이 얼마나 어려운 일인지 깨달았습니다.<br>
<!-- -->원하는 디자인을 말로 설명하는 것도 쉽지 않았고, 협업의 특성상 제 의견만을 고집할 수는 없었기 때문입니다.</p>
<p>이후 회사에서도 기획서와 기존 디자인에 기반하여 개발을 진행하다 보니, 제가 <strong>원하는 기능과 디자인을 온전히 담은 앱</strong>을 만들어야겠다는 생각이 더욱 커져 <strong>WePLi</strong>를 개발하게 되었습니다.</p>
<br>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="내-취향이-담긴-앱-wepli의-탄생">내 취향이 담긴 앱, WePLi의 탄생<a href="https://wepli.site/blog/WePLi%EB%A5%BC%20%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B2%8C%20%EB%90%9C%20%EC%9D%B4%EC%9C%A0#%EB%82%B4-%EC%B7%A8%ED%96%A5%EC%9D%B4-%EB%8B%B4%EA%B8%B4-%EC%95%B1-wepli%EC%9D%98-%ED%83%84%EC%83%9D" class="hash-link" aria-label="Direct link to 내 취향이 담긴 앱, WePLi의 탄생" title="Direct link to 내 취향이 담긴 앱, WePLi의 탄생">​</a></h3>
<p>사실 <strong>WePLi</strong>라는 앱은 완전히 새로운 시작은 아니었습니다.<br>
<!-- -->과거 Java Swing을 사용해 동일한 주제의 프로그램(<a href="https://github.com/DeuWePLi/WePLi" target="_blank" rel="noopener noreferrer">Github</a>)을 만들어본 적이 있었습니다.</p>
<p>당시에도 이 프로젝트는 제 취향을 가득 담아낸 결과물이라 큰 애정을 가졌었으나 기술적 한계로 인해 미완성으로 남겼던 아쉬움이 늘 마음에 남아 있었습니다.</p>
<p>이번에는 성장한 제 개발 능력과 디자인 감각을 최대한으로 동원하여, 그때의 아쉬움을 해소하고 제가 진정으로 만들고 싶었던 앱을 완성하고자 WePLi를 시작했습니다.</p>
<br>
<hr>
<p><strong>WePLi</strong>는 단순한 앱이 아니라, 저의 개발 철학과 디자인에 대한 열정을 담은 프로젝트입니다.<br>
<!-- -->음악이라는 주제를 통해 저만의 취향을 표현하면서도 사용자들에게 공감과 재미를 줄 수 있는 서비스를 만들고자 했습니다.</p>
<p>앞으로 이 사이트를 통해 프로젝트를 완성하기까지의 과정과 시행착오 그리고 배운 점들을 기록하고 공유하고자 합니다.</p>
<p><strong>WePLi</strong>가 단순히 개인의 프로젝트를 넘어, 음악을 사랑하는 사람들이 서로의 취향을 공유하고 공감할 수 있는 공간이 되기를 바랍니다.</p>]]></content:encoded>
            <category>WePLi</category>
            <category>MusicApp</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://wepli.site/blog/welcome</link>
            <guid>https://wepli.site/blog/welcome</guid>
            <pubDate>Thu, 26 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></description>
            <content:encoded><![CDATA[<p><a href="https://docusaurus.io/docs/blog" target="_blank" rel="noopener noreferrer">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">blog plugin</a>.</p>
<p>Here are a few tips you might find useful.</p>
<p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p>
<p>Regular blog authors can be added to <code>authors.yml</code>.</p>
<p>The blog post date can be extracted from filenames, such as:</p>
<ul>
<li><code>2019-05-30-welcome.md</code></li>
<li><code>2019-05-30-welcome/index.md</code></li>
</ul>
<p>A blog post folder can be convenient to co-locate blog post images:</p>
<p><img decoding="async" loading="lazy" alt="Docusaurus Plushie" src="https://wepli.site/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p>
<p>The blog supports tags as well!</p>
<p><strong>And if you don't want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content:encoded>
            <category>Facebook</category>
            <category>Hello</category>
            <category>Docusaurus</category>
        </item>
        <item>
            <title><![CDATA[MDX Blog Post]]></title>
            <link>https://wepli.site/blog/mdx-blog-post</link>
            <guid>https://wepli.site/blog/mdx-blog-post</guid>
            <pubDate>Sun, 01 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></description>
            <content:encoded><![CDATA[<p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features" target="_blank" rel="noopener noreferrer">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer">MDX</a>.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>Use the power of React to create interactive blog posts.</p></div></div>
<!-- -->
<p>For example, use JSX to create an interactive button:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token plain">button onClick</span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:hsl(221, 87%, 60%)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">alert</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">'button clicked!'</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;</span><span class="token maybe-class-name">Click</span><span class="token plain"> me</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token operator" style="color:hsl(221, 87%, 60%)">&lt;</span><span class="token operator" style="color:hsl(221, 87%, 60%)">/</span><span class="token plain">button</span><span class="token operator" style="color:hsl(221, 87%, 60%)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<button>Click me!</button>]]></content:encoded>
            <category>Docusaurus</category>
        </item>
        <item>
            <title><![CDATA[Long Blog Post]]></title>
            <link>https://wepli.site/blog/long-blog-post</link>
            <guid>https://wepli.site/blog/long-blog-post</guid>
            <pubDate>Wed, 29 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[This is the summary of a very long blog post,]]></description>
            <content:encoded><![CDATA[<p>This is the summary of a very long blog post,</p>
<p>Use a <code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code> comment to limit blog post size in the list view.</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content:encoded>
            <category>Hello</category>
            <category>Docusaurus</category>
        </item>
    </channel>
</rss>